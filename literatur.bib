@book{agile05,
	title = {Agile Web Development with Rails (The Facets of Ruby Series)},
	author = {Thomas, Dave und Heinemeier-Hansson, David},
	howpublished = {Paperback},
	month = {July},
	publisher = {Pragmatic Bookshelf},
	year = {2005},
	biburl = {http://www.bibsonomy.org/bibtex/205c24eafd7bf44aa03481c7c354ec592/schmidtwisser},
	keywords = {agile database development framework programming rails ruby }
}

@book{Segaran_2007,
	title = {Programming Collective Intelligence: Building Smart Web 2.0 Applications},
	address = {Sebastopol, CA},
	author = {Toby Segaran},
	publisher = {O'Reilly},
	year = {2007},
	biburl = {http://www.bibsonomy.org/bibtex/28719535a1e41f0e09be8d18063ac0707/else_project},
	abstract = {Explains the algorithms that are used in Web 2.0 applications to provide search rankings, product recommendations, social bookmarking, online matchmaking, and similar forms of collective intelligence.},
	keywords = {ai algorithms collective_intelligence search social_bookmarking web2.0 }
}

@book{storm_2007,
	title = {The Stormrider Guide Europe},
	publisher = {Low Pressure Publishing Ltd.},
	year = {1998}
}

@book{fowler99refactoring,
	title = {Refactoring: Improving the Design of Existing Code},
	author = {Martin Fowler},
	howpublished = {Hardcover},
	month = {June},
	publisher = {{Addison-Wesley Professional}},
	url = {http://www.amazon.ca/exec/obidos/redirect?tag=citeulike04-20{\&}path=ASIN/0201485672},
	year = {1999},
	biburl = {http://www.bibsonomy.org/bibtex/25ccb08759748d7a9ac1a207aca192af7/antonio.garcia},
	abstract = {{Your class library works, but could it be better? Refactoring: Improving the Design of Existing Code shows how refactoring can make object-oriented code simpler and easier to maintain. Today refactoring requires considerable design know-how, but once tools become available, all programmers should be able to improve their code using refactoring techniques. Besides an introduction to refactoring, this handbook provides a catalog of dozens of tips for improving code. The best thing about Refactoring is its remarkably clear presentation, along with excellent nuts-and-bolts advice, from object expert Martin Fowler. The author is also an authority on software patterns and UML, and this experience helps make this a better book, one that should be immediately accessible to any intermediate or advanced object-oriented developer. (Just like patterns, each refactoring tip is presented with a simple name, a "motivation," and examples using Java and UML.)  Early chapters stress the importance of testing in successful refactoring. (When you improve code, you have to test to verify that it still works.) After the discussion on how to detect the "smell" of bad code, readers get to the heart of the book, its catalog of over 70 "refactorings"--tips for better and simpler class design. Each tip is illustrated with "before" and "after" code, along with an explanation. Later chapters provide a quick look at refactoring research. Like software patterns, refactoring may be an idea whose time has come. This groundbreaking title will surely help bring refactoring to the programming mainstream. With its clear advice on a hot new topic, Refactoring is sure to be essential reading for anyone who writes or maintains object-oriented software. --Richard DraganTopics Covered: Refactoring, improving software code, redesign, design tips, patterns, unit testing, refactoring research, and tools.} {As the application of object technology-particularly the Java programming language-has become commonplace, a new problem has emerged to confront the software development community. Significant numbers of poorly designed programs have been created by less-experienced developers, resulting in applications that are inefficient and hard to maintain and extend. Increasingly, software system professionals are discovering just how difficult it is to work with these inherited, "non-optimal" applications. For several years, expert-level object programmers have employed a growing collection of techniques to improve the structural integrity and performance of such existing software programs. Referred to as "refactoring," these practices have remained in the domain of experts because no attempt has been made to transcribe the lore into a form that all developers could use. . .until now. In Refactoring: Improving the Design of Existing Software, renowned object technology mentor Martin Fowler breaks new ground, demystifying these master practices and demonstrating how software practitioners can realize the significant benefits of this new process. With proper training a skilled system designer can take a bad design and rework it into well-designed, robust code. In this book, Martin Fowler shows you where opportunities for refactoring typically can be found, and how to go about reworking a bad design into a good one. Each refactoring step is simple-seemingly too simple to be worth doing. Refactoring may involve moving a field from one class to another, or pulling some code out of a method to turn it into its own method, or even pushing some code up or down a hierarchy. While these individual steps may seem elementary, the cumulative effect of such small changes can radically improve the design. Refactoring is a proven way to prevent software decay. In addition to discussing the various techniques of refactoring, the author provides a detailed catalog of more than seventy proven refactorings with helpful pointers that teach you when to apply them; step-by-step instructions for applying each refactoring; and an example illustrating how the refactoring works. The illustrative examples are written in Java, but the ideas are applicable to any object-oriented programming language.}},
	priority = {4}, isbn = {0201485672}, citeulike-article-id = {251681},
	keywords = {cites.ref info.refs.books research.cs.softeng tech.coding.refactoring }
}


